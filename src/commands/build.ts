import * as fs from 'fs'
import * as path from 'path'
import * as jsYaml from 'js-yaml'
import * as fg from 'fast-glob'
import * as tsNode from 'ts-node'
import { Workflow } from '../lib'

/**
 * Comment indicating the file should not be modified.
 * @type {string}
 */
export const DO_NOT_MODIFY_COMMENT = [
	'# ------------DO-NOT-MODIFY-THIS-FILE------------',
	'# This file was automatically generated by github-actions-workflow-ts.',
	'# DO NOT MODIFY IT BY HAND. Instead, modify the source *.wac.ts file(s)',
	'# and run "generate-workflow-files build" (or "gwf build") to regenerate this file.',
	'# For more information, run "generate-workflow-files --help".',
	'# ------------DO-NOT-MODIFY-THIS-FILE------------',
].join('\n')

/**
 * Flag to track if tsNode is registered.
 * @type {boolean}
 */
let tsNodeRegistered = false

/**
 * Convert an absolute path to a relative path from the current working directory.
 *
 * @param {string} p - The absolute path.
 * @returns {string} - Relative path from the current working directory.
 */
export const relativePath = (p: string): string =>
	path.relative(process.cwd(), p)

/**
 * Registers ts-node if it hasn't been registered.
 *
 * @param {object} [options={}] - Options for ts-node registration.
 */
export const registerTsNode = (options = {}): void => {
	if (tsNodeRegistered) return

	tsNode.register({ ...options })
	tsNodeRegistered = true
}

/**
 * Retrieves the file paths of all workflow files in the project.
 *
 * @returns {string[] | undefined} - Array of paths to *.wac.ts files or undefined if none are found.
 */
export const getWorkflowFilePaths = (): string[] | undefined => {
	const workflowFilesPaths = fg.sync(`${process.cwd()}/**/*.wac.ts`, {
		onlyFiles: true,
		dot: true,
	})

	if (!workflowFilesPaths || !workflowFilesPaths.length) {
		console.log(
			'[github-actions-workflow-ts] No workflow files found. Please create at least one *.wac.ts file in your project',
		)

		return
	}

	console.log(
		'[github-actions-workflow-ts] Detected following .wac.ts files:\n',
		workflowFilesPaths.map((item) => `-> ${relativePath(item)}`).join('\n'),
	)

	return workflowFilesPaths
}

/**
 * Writes the provided workflow JSON data to corresponding YAML files.
 *
 * @param {Record<string, Workflow>} workflowJSON - The workflow data in JSON format.
 * @param {Record<string, unknown>} argv - Command line arguments.
 * @returns {number} - The number of workflows written.
 */
export const writeWorkflowJSONToYamlFiles = (
	workflowJSON: Record<string, Workflow>,
	argv: Record<string, unknown>,
): number => {
	let workflowCount: number = 0

	for (const workflowName in workflowJSON) {
		const workflowYaml = jsYaml.dump(workflowJSON[workflowName].workflow, {
			noRefs: !argv['refs'],
		})

		const yamlWorkflowPath = path.join(
			'.github',
			'workflows',
			`${workflowJSON[workflowName].filename}.yml`,
		)

		console.log(
			`[github-actions-workflow-ts] Writing to ${relativePath(yamlWorkflowPath)}:`,
		)

		fs.writeFileSync(
			yamlWorkflowPath,
			[DO_NOT_MODIFY_COMMENT, workflowYaml].join('\n'),
		)

		workflowCount++
	}

	return workflowCount
}

/**
 * Creates the .github/workflows directory if it doesn't exist.
 */
export const createWorkflowDirectory = (): void => {
	const workflowsDir = relativePath(path.join('.github', 'workflows'))

	if (!fs.existsSync(workflowsDir)) {
		console.log(
			'[github-actions-workflow-ts] .github/workflows directory not found. Creating it.',
		)
		fs.mkdirSync(workflowsDir, { recursive: true })
	}
}

/**
 * Generates workflow files based on the provided command line arguments.
 *
 * @param {Record<string, unknown>} argv - Command line arguments.
 * @returns {Promise<void>} - A promise that resolves when the generation is completed.
 */
export const generateWorkflowFiles = async (
	argv: Record<string, unknown>,
): Promise<void> => {
	const workflowFilePaths = getWorkflowFilePaths() || []
	let workflowCount = 0

	createWorkflowDirectory()

	for (const idx in workflowFilePaths) {
		workflowCount += writeWorkflowJSONToYamlFiles(
			await import(workflowFilePaths[idx]),
			argv,
		)
	}

	console.log(
		`[github-actions-workflow-ts] Successfully generated ${workflowCount} workflow file(s)`,
	)
}
